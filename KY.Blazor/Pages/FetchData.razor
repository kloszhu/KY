@page "/fetchdata"
@using MatBlazor;
@using KY.Blazor.Data
@inject WeatherForecastService ForecastService
<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <MatPaginator Length="@forecasts.Count()" PageSize="@pageSize" Page="@OnPage"></MatPaginator>
    </div>

    <div>
        pageSize : @pageSize
    </div>

    <div>
        pageIndex : @pageIndex
    </div>


}

@code {
    int pageSize = 3;
    int pageIndex = 0;

    void OnPage(MatPaginatorPageEvent e)
    {
        pageSize = e.PageSize;
        pageIndex = e.PageIndex;
    }
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
